import XCTest
import Foundation
import Nettle

public class HashTests : XCTestCase {

    func testSha1() {
        var hc = SHA1()
        let chc = Hash.named(hc.name)!

        let d = Data([8, 6, 7, 5, 3, 0, 9])
        hc.update(d)
        chc.update(d)

        let expected: ContiguousArray<UInt8> = [0x99, 0x4a, 0x79, 0x9d, 0x74, 0x51, 0x00, 0x86, 0x9c, 0xc0, 0xaa, 0xf2, 0xc0, 0x9d, 0x26, 0x02, 0xd4, 0x4b, 0x1c, 0x93]

        let d1 = hc.digest()
        XCTAssertEqual(d1, expected)

        let d2 = chc.digest()
        XCTAssertEqual(d2, expected)

        XCTAssertEqual(hc.block_size, 64)
        XCTAssertEqual(chc.block_size, 64)
    }

    func testSha256() {
        var hc = SHA256()
        let chc = Hash.named(hc.name)!

        let d = Data([8, 6, 7, 5, 3, 0, 9])
        hc.update(d)
        chc.update(d)

        let expected: ContiguousArray<UInt8> = [0x0e, 0xc4, 0x0c, 0x04, 0x96, 0x48, 0x4d, 0x0a, 0xdc, 0xa4, 0x66, 0xbe, 0x6e, 0x23, 0x3d, 0xcb, 0xa7, 0xe8, 0x6e, 0x73, 0x2e, 0xd9, 0xaf, 0x98, 0x4f, 0x0e, 0x80, 0xd3, 0xdd, 0x86, 0xfd, 0x1a]

        let d1 = hc.digest()
        XCTAssertEqual(d1, expected)

        let d2 = chc.digest()
        XCTAssertEqual(d2, expected)

        XCTAssertEqual(hc.block_size, 64)
        XCTAssertEqual(chc.block_size, 64)
    }

    func testSha384() {
        var hc = SHA384()
        let chc = Hash.named(hc.name)!

        let d = Data([8, 6, 7, 5, 3, 0, 9])
        hc.update(d)
        chc.update(d)

        let expected: ContiguousArray<UInt8> = [0xad, 0x8e, 0x9f, 0x1d, 0xae, 0xa0, 0x5d, 0x0c, 0x7c, 0x01, 0x16, 0x11, 0x64, 0x91, 0x81, 0x99, 0x08, 0xd8, 0x65, 0x58, 0xf4, 0x0f, 0xda, 0x22, 0x71, 0x45, 0x2b, 0xe0, 0xf5, 0x95, 0x98, 0xdd, 0x7f, 0x3d, 0x98, 0x61, 0xa5, 0xb7, 0x91, 0x5c, 0x53, 0x9f, 0x96, 0x26, 0x60, 0x25, 0x48, 0xf1]

        let d1 = hc.digest()
        XCTAssertEqual(d1, expected)

        let d2 = chc.digest()
        XCTAssertEqual(d2, expected)

        XCTAssertEqual(hc.block_size, 128)
        XCTAssertEqual(chc.block_size, 128)
    }

    /// Test that value-type hash contexts behave as values, and that
    /// they reset to their initial state after digest()
    func testValClone() {
        var hc = SHA256()

        hc.update([8, 6, 7])

        let d1 = hc.digest()
        XCTAssertEqual(d1, [0x5b, 0xd7, 0xa8, 0x27, 0x0a, 0xd3, 0xed, 0xc3, 0x92, 0x40, 0xc0, 0x3d, 0x02, 0x0e, 0x46, 0x7c, 0x82, 0x23, 0x2c, 0x39, 0x6e, 0xe8, 0x62, 0x86, 0x01, 0x59, 0xd5, 0xc9, 0x75, 0x79, 0x72, 0x37])

        hc.update(Data([5, 3, 0, 9]))
        var hc_cl = hc
        hc.update([6])
        hc_cl.update([5,0,0,0])

        let d2 = hc.digest()     // hash of [5, 3, 0, 9, 6]
        let d3 = hc_cl.digest()  // hash of [5, 3, 0, 9, 5, 0, 0, 0]
        let d4 = hc.digest()     // hash of [] (empty message)

        XCTAssertEqual(d2, [0xbf, 0x8a, 0x94, 0x57, 0x0b, 0xf3, 0x2a, 0xdd, 0xb7, 0x42, 0x96, 0xd6, 0xe5, 0x75, 0x62, 0xf2, 0x6f, 0xe1, 0xb5, 0x4c, 0xd6, 0x3f, 0x02, 0x9a, 0x76, 0x86, 0x11, 0xc9, 0xe9, 0x88, 0x98, 0x02])
        XCTAssertEqual(d3, [0x53, 0x40, 0x8b, 0x57, 0x1f, 0x3c, 0xbe, 0xb3, 0x9f, 0x4b, 0x8a, 0xa6, 0x2f, 0x09, 0x80, 0x76, 0x54, 0xcd, 0xbe, 0xde, 0x51, 0x46, 0xfb, 0xc2, 0x02, 0x1e, 0xa1, 0x38, 0x93, 0x31, 0xd3, 0x67])
        XCTAssertEqual(d4, [0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55])
    }

    /// Test that reference-type hash contexts behave as references, and that
    /// they reset to their initial state after digest()
    func testRefClone() {
        let hc = Hash.named("sha256")!

        hc.update([8, 6, 7])

        let _ = hc.digest()

        hc.update([5, 3, 0, 9])
        let hc_alias = hc
        let hc_cl = hc.clone()
        hc.update(Data([6]))
        hc_alias.update(Data([5, 0, 0, 0]))
        [9, 8, 7].withUnsafeBufferPointer {
            hc_cl.update(bytes: $0)
        }

        XCTAssertEqual(hc.name, "sha256")
        XCTAssertEqual(hc_cl.name, "sha256")

        let d1 = hc.digest()       // hash of [5, 3, 0, 9, 6, 5, 0, 0, 0]
        let d2 = hc_alias.digest() // hash of [] (empty, because reset)
        let d3 = hc_cl.digest()    // hash of [5, 3, 0, 9, 9, 8, 7]

        XCTAssertEqual(d1, [0x0c, 0xfb, 0x67, 0xae, 0x2f, 0x0f, 0x63, 0x7b, 0x28, 0xf0, 0x3c, 0xff, 0x65, 0x64, 0x1c, 0x28, 0xe4, 0xf7, 0x89, 0x2a, 0xbf, 0x55, 0xf1, 0xb4, 0x3f, 0x5a, 0x2c, 0x59, 0x48, 0x04, 0x95, 0x97])
        XCTAssertEqual(d2, [0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55])
        XCTAssertEqual(d3, [0x08, 0x7a, 0x24, 0xf3, 0xb3, 0x87, 0x16, 0x41, 0x1c, 0xd9, 0x5d, 0x3f, 0xeb, 0x57, 0x8a, 0x1b, 0x79, 0x9c, 0xf3, 0x35, 0x7a, 0x69, 0x94, 0x4e, 0xce, 0x0b, 0x42, 0x1c, 0x38, 0x1c, 0x36, 0x19])
    }

    /// Test looking up hash functions by name
    func testByName() {
        XCTAssertTrue(Hash.Algorithm.all.count > 4)
        XCTAssertTrue(Hash.Algorithm.all.contains { $0.name == "sha256" })

        let h1 = Hash.Algorithm.named("sha256")
        XCTAssertEqual(h1?.name, "sha256")
        XCTAssertEqual(h1?.block_size, 64)
        let h2 = Hash.Algorithm.named("sha3_256")
        XCTAssertEqual(h2?.name, "sha3_256")
        XCTAssertEqual(h2?.block_size, 136) // r=1088 bits
        let h3 = Hash.Algorithm.named("grumblekins")
        XCTAssertNil(h3)

        let h1c = h1!.new()
        h1c.update([ 0x61 ])
        let h2c = h2!.new()
        h2c.update([ 0x61 ])

        XCTAssertEqual(h1c.digest(),
                       [0xca, 0x97, 0x81, 0x12, 0xca, 0x1b, 0xbd, 0xca, 0xfa, 0xc2, 0x31, 0xb3, 0x9a, 0x23, 0xdc, 0x4d, 0xa7, 0x86, 0xef, 0xf8, 0x14, 0x7c, 0x4e, 0x72, 0xb9, 0x80, 0x77, 0x85, 0xaf, 0xee, 0x48, 0xbb])
        XCTAssertEqual(h2c.digest(),
                       [0x80, 0x08, 0x4b, 0xf2, 0xfb, 0xa0, 0x24, 0x75, 0x72, 0x6f, 0xeb, 0x2c, 0xab, 0x2d, 0x82, 0x15, 0xea, 0xb1, 0x4b, 0xc6, 0xbd, 0xd8, 0xbf, 0xb2, 0xc8, 0x15, 0x12, 0x57, 0x03, 0x2e, 0xcd, 0x8b])
    }

    func testHMAC() {
        // The test vectors from RFC2104

        guard let h1 = Hash.Algorithm.named("md5") else {
            XCTFail()
            return
        }
        let key1: [UInt8] =  [ 11, 11, 11, 11, 11, 11, 11, 11,
                               11, 11, 11, 11, 11, 11, 11, 11 ]
        var ctxt = key1.withUnsafeBytes {
            HMAC(algorithm: h1, key: $0.bindMemory(to: UInt8.self))
        }
        ctxt.update("Hi There".data(using: .ascii)!)
        let dgst1 = ctxt.digest()

        XCTAssertEqual(dgst1,
                       [0x92, 0x94, 0x72, 0x7a, 0x36, 0x38, 0xbb, 0x1c,
                        0x13, 0xf4, 0x8e, 0xf8, 0x15, 0x8b, 0xfc, 0x9d])
        XCTAssertEqual(ctxt.digest_size, 16)
        XCTAssertEqual(ctxt.name, "hmac-md5")


        let key2: [UInt8] = [ 0x4A, 0x65, 0x66, 0x65 ]
        ctxt = key2.withUnsafeBytes {
            HMAC(algorithm: h1, key: $0.bindMemory(to: UInt8.self))
        }
        let key2h = ctxt.key
        ctxt.update("what do ya want for nothing?".data(using: .ascii)!)
        let ctxt2 = key2h.new()
        ctxt2.update("that ain't working, ".data(using: .ascii)!)
        let dgst2 = ctxt.digest()
        ctxt2.update("that's the way you do it".data(using: .ascii)!)
        let dgst2a = ctxt2.digest()

        XCTAssertEqual(key2h.digest_size, 16)
        XCTAssertEqual(key2h.name, "hmac-md5")
        XCTAssertEqual(dgst2,
                       [ 0x75, 0x0c, 0x78, 0x3e, 0x6a, 0xb0, 0xb5, 0x03,
                         0xea, 0xa8, 0x6e, 0x31, 0x0a, 0x5d, 0xb7, 0x38 ])

        // Homegrown test vector, not from RFC
        XCTAssertEqual(dgst2a,
                       [ 0xd6, 0x54, 0x5c, 0x9e, 0xbf, 0xc5, 0xfc, 0xd1,
                         0x55, 0xd9, 0x12, 0x39, 0x83, 0x09, 0x5d, 0x3e ])

        guard let h2 = Hash.Algorithm.named("sha384") else {
            XCTFail()
            return
        }

        // Test vector from RFC4231
        let key3: [UInt8] = Array(repeating: 0xAA, count:131)
        let key3h = key3.withUnsafeBytes {
            HMAC(algorithm: h2, key: $0.bindMemory(to: UInt8.self)).key
        }
        let msg3 = "This is a test using a larger than block-size key and a larger than block-size data. The key needs to be hashed before being used by the HMAC algorithm.".data(using: .ascii)!

        let dgst3 = key3h.digest(of: msg3)
        XCTAssertEqual(dgst3,
                       [ 0x66, 0x17, 0x17, 0x8e, 0x94, 0x1f, 0x02, 0x0d,
                         0x35, 0x1e, 0x2f, 0x25, 0x4e, 0x8f, 0xd3, 0x2c,
                         0x60, 0x24, 0x20, 0xfe, 0xb0, 0xb8, 0xfb, 0x9a,
                         0xdc, 0xce, 0xbb, 0x82, 0x46, 0x1e, 0x99, 0xc5,
                         0xa6, 0x78, 0xcc, 0x31, 0xe7, 0x99, 0x17, 0x6d,
                         0x38, 0x60, 0xe6, 0x11, 0x0c, 0x46, 0x52, 0x3e ])
    }

    /// Not even a stub dynamic runtime on Linux, so we have to manually list the test cases
    static public let allTests = [
        ("testSha1", testSha1),
        ("testSha256", testSha256),
        ("testSha384", testSha384),
        ("testValClone", testValClone),
        ("testRefClone", testRefClone),
        ("testByName", testByName),
        ("testHMAC", testHMAC),
    ]
}

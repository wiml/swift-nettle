import Foundation
import Nettle

fileprivate func hex(_ h: String) throws -> ContiguousArray<UInt8> {
    let (r, s) =
      h.reduce(
        ([], nil),
        {
            ( curs, v ) -> (ContiguousArray<UInt8>, UInt8?) in
            guard let nyb2 = v.hexDigitValue else {
                return curs
            }
            let nv = UInt8(nyb2)
            let (accum, st) = curs
            if let h = st {
                let oct: UInt8 = (h << 4) | nv
                return (accum + [oct], nil)
            } else {
                return (accum, nv)
            }
        })
    guard s == nil else {
        throw DecodingError.dataCorrupted(DecodingError.Context(codingPath: [], debugDescription: "Odd number of hex digits"))
    }
    return r
}

// A secp256r1 keypair, generated by openssl
let ec1_pub_sec1 = try! hex("04:bd:93:7c:ce:d2:83:22:94:ef:23:73:92:1b:9a:93:dc:66:54:a4:2d:4a:cc:0f:19:cd:2f:8b:5e:bc:49:76:cb:15:66:e3:22:66:62:11:34:8e:87:33:78:1c:88:15:d4:ed:f8:fb:16:b7:1a:c0:2d:24:4e:ee:5d:12:86:05:d9")
let ec1_pub_sec1_c = try! hex("03:bd:93:7c:ce:d2:83:22:94:ef:23:73:92:1b:9a:93:dc:66:54:a4:2d:4a:cc:0f:19:cd:2f:8b:5e:bc:49:76:cb")
let ec1_priv_bare = try! hex("c7:0c:8d:d4:fe:e4:be:ed:a9:75:ea:3b:f4:3e:00:56:6b:ca:1e:cf:6a:4c:02:22:10:63:98:f7:15:1b:9f:b2")
let ec1_curve = ECCPrimeCurve.secp256r1

// Another keypair
let ec2_pub_sec1 = try! hex("04:2b:0c:78:8d:3b:01:a1:d1:6c:b4:5b:74:30:1f:9b:e9:bb:50:63:22:79:98:04:83:ee:23:ab:2e:c8:8a:bf:6e:5e:b6:30:23:0b:9e:ce:84:3f:25:f2:58:1e:6b:22:13:72:24:60:7f:2e:c2:5f:ae:44:26:28:44:bf:e2:63:5a")
let ec2_pub_sec1_c = try! hex("02:2b:0c:78:8d:3b:01:a1:d1:6c:b4:5b:74:30:1f:9b:e9:bb:50:63:22:79:98:04:83:ee:23:ab:2e:c8:8a:bf:6e")
let ec2_priv_bare = try! hex("c5:6e:4a:64:ce:42:6f:30:69:55:ac:d1:e5:6b:16:ea:0b:3c:3a:26:3d:08:e6:3a:a5:0f:0b:04:5e:5c:87:04")
let ec2_curve = ECCPrimeCurve.secp256r1

// The shared secret generated by ec1 and ec2 (computed by openssl)
let ec1_ec2_raw_shared = try! hex("1b01366156976ffc8b0205f8d11481722ca9aa561361cce8b67032595d045171")

// A 256-bit message digest, and its ECDSA signature (computed by openssl)
let testmsg_digest = try! hex("0decab5ad283bfec2c919bfe1988e884872a9be64a583efae3f05ee5671d879c")
let testmsg_signature_der = try! hex("3046022100ed4b9e40b331b0b05b83a9d4b0950f216c6adad6fa2e735d1aaeccfdf1f3b3c90221008f4a731ea761096df3e86c3624be4d01079d6df4bc2740ee80b906bbdda658b1")
let testmsg_signature_p = try! hex("ed4b9e40b331b0b05b83a9d4b0950f216c6adad6fa2e735d1aaeccfdf1f3b3c98f4a731ea761096df3e86c3624be4d01079d6df4bc2740ee80b906bbdda658b1")

// A 500-bit RSA key from Nettle's test suite
let rsa1_pub_pkcs1 = try! hex("3047023f085c3408989acae4faec3cbbad91c90d34c1d259cd74121a36f38b0b51424a9b2be514a04377113a6cdafe79dd7d5f2ecc8b5e9661189b86a7b22239907c25020436ad4b1d")
let rsa1_pub_sexp = try! hex("2831303a7075626c69632d6b657928333a72736128313a6e36333a085c3408989acae4faec3cbbad91c90d34c1d259cd74121a36f38b0b51424a9b2be514a04377113a6cdafe79dd7d5f2ecc8b5e9661189b86a7b22239907c252928313a65343a36ad4b1d292929")
let rsa1_priv_pkcs1 = try! hex(
  """
    30820135020100023f085c3408989acae4faec3cbbad91c90d34c1d259cd
    74121a36f38b0b51424a9b2be514a04377113a6cdafe79dd7d5f2ecc8b5e
    9661189b86a7b22239907c25020436ad4b1d023f06ee6d4ff3c239e40815
    0daf8117abfa36a40ad4455d9059a86d52f33a2de07418a0a699594588c6
    4810248c9412d554f74af947c73c32007e87c92f0937ed022003259879b2
    4315e9cf14254824c7935d807cdb6990f414a0f65e6065130a611f022002
    a81ba73bad45fc73b36deffce52d1b73e0747f4d8a82648cecd310448ea6
    3b0220026cbdad5dd0046e093f060ecd5b4ac918e098b0278bb752b7cadd
    6a8944f0b902200148751e622d6d58e3bb094afd6edacf7370351d068e2c
    e9f565c5528c4a7473022000f8a458ea73a018dc6fa56863e3bc6de405f3
    64f77dee6f0962679ea1a8282e
  """)
let rsa1_priv_sexp = try! hex(
  """
    2831313a707269766174652d6b657928333a72736128313a6e36333a085c3408
    989acae4faec3cbbad91c90d34c1d259cd74121a36f38b0b51424a9b2be514a0
    4377113a6cdafe79dd7d5f2ecc8b5e9661189b86a7b22239907c252928313a65
    343a36ad4b1d2928313a6436333a06ee6d4ff3c239e408150daf8117abfa36a4
    0ad4455d9059a86d52f33a2de07418a0a699594588c64810248c9412d554f74a
    f947c73c32007e87c92f0937ed2928313a7033323a03259879b24315e9cf1425
    4824c7935d807cdb6990f414a0f65e6065130a611f2928313a7133323a02a81b
    a73bad45fc73b36deffce52d1b73e0747f4d8a82648cecd310448ea63b292831
    3a6133323a026cbdad5dd0046e093f060ecd5b4ac918e098b0278bb752b7cadd
    6a8944f0b92928313a6233323a0148751e622d6d58e3bb094afd6edacf737035
    1d068e2ce9f565c5528c4a74732928313a6333323a00f8a458ea73a018dc6fa5
    6863e3bc6de405f364f77dee6f0962679ea1a8282e292929
  """)

// A 2048-bit RSA key generated by openssl
let rsa2_priv_pkcs1 = try! hex(
  """
    308204a40201000282010100b43401c5bf8abf6d12535e749b54f831f598
    ecbcad91ace4f36819eddf8110a3663511bea8e8f8350ab5eac6c7ea72f4
    10a47d0610769f2932d414e1e58530f842e8cfdfe739c512f59b0bd19003
    41bcc9b01d20d3a1d29d484b55fceb4bde50063ec18df414f4e5140b7686
    3ecf78cd62e63cb6e711badfbabd51abd4ea71261d73eaea5b1fe09b6df5
    19d541aac157c0b248fca51960a956d98bde3d2c39ca41e03b94decc9898
    4c2ac26fee8856e36b589b765b58f3ece8f78d02e0816a1e9dd546fa1151
    7682abf1b825ae686f76a3b088f7a7cbdcc10701a618ebdaaae9189ea144
    b2149dec2d6d645b411d05d25244e14407cceed4ff69f951ef587dab0203
    0100010282010076e9e6cd868359a4f135e09bd430f3038ccd1853bdb9e6
    bcc2becc75834ad91eea8054b05b28393a4f521296902fef218da5edf6c5
    8071b12f2072934af1648a3f2500a00126c71ca6c464bd2a6a6bc3d7d806
    b0b5d71073c7d426ef1a9a5b1eb5b04deb8dc9127de48757f4689862602e
    463e8477e0e44f651c2f3bd3e9cd35bc2d083d5382e2696f36eda671374f
    35760433837abb2ea5a6043dd91ddf1924c680fa6097161dea2d6ffbbce4
    b25b7d970f03f0222e0f17c8926f2b385bab115a641856eb160ed92002fa
    717ce798ee3b260c80301c3a74349c9d793f282ea4595fe3aabfe7c8c306
    efdfd591b0199546292ff9ca9f4ae9113f4826637aa75102818100ea251e
    e8acf7ea77393e98118a156ec33da86468291cbda76b9d405e25892ca692
    5f2173f0cda5d0fef097c3fe1a3b03ec6cfa41c180f779c1ac27fadddb4e
    a79e05db3149ab01d8702ebbf9fe54ae3e2566bc0bf538a989f9652e3fc1
    a94e26ccbb2ee86eb575da344fee10e1eae82009737103c0309564599d13
    95482cdb5902818100c505f30207f10d83fdc7273dd63f691ae996fe16c6
    d43454f59cefef85bb6f0046fc437a92559a8bfe0482ed0d0b1dbff41957
    0a131d74a2526aab387e65784b497cc7db1c29b0ec9c0612e48ea4b64cdc
    9e9ae7d295ca19a50ff36e23040fcbed6674df55bfa0dbc2212b452eeca0
    2454ad93d247c21b4b8e235c69a878f4a302818100cf3e11f0920051383b
    a3ca8763b7fab4b6e35013dda7c1b9e907638cb11e8c35d7427a629b95fa
    19553d70a71a46ef4b56bd52785724a666cf646872a461d3698af5d5fff7
    1b7463b54fb833dac7eafdb8af08ec709d397a9512d86fb822f9b85fe7a1
    ea3aeb4427e1bb8994c9d1d8a95a942248d69869f24b5b3b951b3010e902
    818100a666b2ea3938def86683286272ac15a2343d61966d1156ad96cf98
    5a0cf1d3fb40f8d82912a49825ba41a72e7cc0b1bca8762a6c08deecde17
    8b9dd6d5f1ef5a6ed3a39c2c3a0e0298780cc6daaec4854023f8a2e8d9b7
    da56ed94e4a5504de3273b4c643ff0dbf41f0e929418e0a3146c2c39d7f4
    e13cda604eff4301963ecf0281805513d3e13ed42d24327e0f8fef18b236
    62fa2a98a9a9cd023d3bfbcc8e6e267868b2427a810a633a097e01cccbd4
    ff2912b9a04fc7d40c00b18f1c1039f641e359749959e5338214a2f07709
    919df61fe77e813dc4691f34241ab7b77e15c0ad4ab5031d6f8d4911bff3
    414e6350b3a5978c398eee4a112becc7a2c921115fdd
  """)
let rsa2_pub_pkcs1 = try! hex(
  """
    3082010a0282010100b43401c5bf8abf6d12535e749b54f831f598ecbcad
    91ace4f36819eddf8110a3663511bea8e8f8350ab5eac6c7ea72f410a47d
    0610769f2932d414e1e58530f842e8cfdfe739c512f59b0bd1900341bcc9
    b01d20d3a1d29d484b55fceb4bde50063ec18df414f4e5140b76863ecf78
    cd62e63cb6e711badfbabd51abd4ea71261d73eaea5b1fe09b6df519d541
    aac157c0b248fca51960a956d98bde3d2c39ca41e03b94decc98984c2ac2
    6fee8856e36b589b765b58f3ece8f78d02e0816a1e9dd546fa11517682ab
    f1b825ae686f76a3b088f7a7cbdcc10701a618ebdaaae9189ea144b2149d
    ec2d6d645b411d05d25244e14407cceed4ff69f951ef587dab0203010001
  """)

let rsa2_test_msg = "The magic words are, uh ... squamous saxifrage?"

// Test signatures of the above, generated with e.g.:
//   <testmsg openssl dgst -sha256 -binary | openssl pkeyutl -inkey privkey.pem -sign -pkeyopt digest:sha256 -pkeyopt rsa_padding_mode:pkcs1 | xxd -ps

let rsa2_signature_pkcs1_sha256 = try! hex(
  """
    a265b3ddacfbc5c7b7c2c19971ef14511fba19be084a45d90f8157964d63
    440a693920d6a0d3cab488c1aba389f740c0075ce109b426f188a01f99f9
    002854389de8059509f308042f79088ef64dcb1d2a0dc54415183696102e
    4cfc1d6ac7ac4efd1a3c0add30fcaa248fd4051c6de8da185bdfcb984002
    af1971c8f7c93ebd01d808bd09b21d78c355aa583e78732e1b8e4969a336
    e31b1987b597dbb7cc00985920dd2408cf8909d9594aa8308d885bbc90c9
    bb4be2c9ea88db89c6adb417fa641ab86a79acf7c544790de011760e3699
    9c8ec3fd4e7a1b9c6110db7868af1f45364f1a43a02fbddc41e96e0b1e90
    a30ce3934be77e78fa37bae04a525143
  """)
let rsa2_signature_pss_sha512_20 = try! hex(
  """
    06abf2fb8938a06bf5f9648311d27c81b80309f59871c1edf1ef846140dc
    70789bf2b8f5d015c24137a046a550647df7b2ac4b00dc75c48d52ab42ec
    1a26eb882a0e1dc5caa016cc0e8ac1cf818001d7f7aafb250cb3a8ed6853
    34fda78b476b912e697a0843a3eabbd23c29775c7c309f846b2a0514bc5c
    b7bc83cf16206fc3267502835f6e2e196faab7d2d233dd022006822688d7
    7fd1a22dfc1366df608f965dade901d00491b0d880a728249c8759e5523b
    aa6218cfcf0076daa9bc38c3275c3ef6176f2610ff926ecdd44fe32dc043
    568a43668ca280b43e468cc001090056a0107dce0bf823de0f5c72f3037d
    840b85228354d3b9e1344770205fc9fd
  """)
let rsa2_signature_pss_sha512_64 = try! hex(
  """
    2e8576992e5e258245abb50be086c6ad01f18dbe9bb7964cc61a259e911c
    ed798d513388df02bae72755edb413d56ce3de1586765bd8ad36aa4ec9d5
    8a1a0e658ea48d32fcdf018d7ce683f9330f49326e1bd7084c4d68ce602a
    e53462740f92eed31b89dc45fad60c64de958486cd0759f2fe4e4eecaa9c
    ea8778f964f03c9e1bd9744ab51e2222766b6d12851d74aa8f40bc3f5b7f
    8bb04c2acd3656a4f54228c10b2c9ff92dec20c38ce55f09d67c4f7b6275
    bc5b52cedaa6b56945642d5418950a605a3a6776956a5434de2f310e1f90
    4783652a5242a15ccf3ff9d40288a333184e63f2e38cd43fb82fdd7ef7a2
    64469e81a1f42cd2ae1536bc0e2ea1f5
  """)

import Foundation
import Nettle

fileprivate func hex(_ h: String) throws -> ContiguousArray<UInt8> {
    let (r, s) =
      h.reduce(
        ([], nil),
        {
            ( curs, v ) -> (ContiguousArray<UInt8>, UInt8?) in
            guard let nyb2 = v.hexDigitValue else {
                return curs
            }
            let nv = UInt8(nyb2)
            let (accum, st) = curs
            if let h = st {
                let oct: UInt8 = (h << 4) | nv
                return (accum + [oct], nil)
            } else {
                return (accum, nv)
            }
        })
    guard s == nil else {
        throw DecodingError.dataCorrupted(DecodingError.Context(codingPath: [], debugDescription: "Odd number of hex digits"))
    }
    return r
}

// A secp256r1 keypair, generated by openssl
let ec1_pub_sec1 = try! hex("04:bd:93:7c:ce:d2:83:22:94:ef:23:73:92:1b:9a:93:dc:66:54:a4:2d:4a:cc:0f:19:cd:2f:8b:5e:bc:49:76:cb:15:66:e3:22:66:62:11:34:8e:87:33:78:1c:88:15:d4:ed:f8:fb:16:b7:1a:c0:2d:24:4e:ee:5d:12:86:05:d9")
let ec1_pub_sec1_c = try! hex("03:bd:93:7c:ce:d2:83:22:94:ef:23:73:92:1b:9a:93:dc:66:54:a4:2d:4a:cc:0f:19:cd:2f:8b:5e:bc:49:76:cb")
let ec1_priv_bare = try! hex("c7:0c:8d:d4:fe:e4:be:ed:a9:75:ea:3b:f4:3e:00:56:6b:ca:1e:cf:6a:4c:02:22:10:63:98:f7:15:1b:9f:b2")
let ec1_curve = ECCPrimeCurve.secp256r1

// Another keypair
let ec2_pub_sec1 = try! hex("04:2b:0c:78:8d:3b:01:a1:d1:6c:b4:5b:74:30:1f:9b:e9:bb:50:63:22:79:98:04:83:ee:23:ab:2e:c8:8a:bf:6e:5e:b6:30:23:0b:9e:ce:84:3f:25:f2:58:1e:6b:22:13:72:24:60:7f:2e:c2:5f:ae:44:26:28:44:bf:e2:63:5a")
let ec2_pub_sec1_c = try! hex("02:2b:0c:78:8d:3b:01:a1:d1:6c:b4:5b:74:30:1f:9b:e9:bb:50:63:22:79:98:04:83:ee:23:ab:2e:c8:8a:bf:6e")
let ec2_priv_bare = try! hex("c5:6e:4a:64:ce:42:6f:30:69:55:ac:d1:e5:6b:16:ea:0b:3c:3a:26:3d:08:e6:3a:a5:0f:0b:04:5e:5c:87:04")
let ec2_curve = ECCPrimeCurve.secp256r1

// A 256-bit message digest, and its signature (computed by openssl)
let testmsg_digest = try! hex("0decab5ad283bfec2c919bfe1988e884872a9be64a583efae3f05ee5671d879c")
let testmsg_signature_der = try! hex("3046022100ed4b9e40b331b0b05b83a9d4b0950f216c6adad6fa2e735d1aaeccfdf1f3b3c90221008f4a731ea761096df3e86c3624be4d01079d6df4bc2740ee80b906bbdda658b1")
let testmsg_signature_p = try! hex("ed4b9e40b331b0b05b83a9d4b0950f216c6adad6fa2e735d1aaeccfdf1f3b3c98f4a731ea761096df3e86c3624be4d01079d6df4bc2740ee80b906bbdda658b1")
